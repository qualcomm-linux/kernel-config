---
name: Load Parameters
description: Load parameters for the build job

outputs:
  build_matrix:
    description: Build matrix
    value: ${{ steps.set-matrix.outputs.build_matrix }}

  full_matrix:
    description: full matrix containing lava devails
    value: ${{ steps.set-matrix.outputs.full_matrix }}

  bootbins:
    description: Boot Bins for targets to generate Flat Build
    value: ${{ steps.set-matrix.outputs.bootbins }}

  ubuntu_matrix:
    description: Ubuntu matrix for generating packages
    value: ${{ steps.ubuntu-matrix.outputs.ubuntu_matrix }}

runs:
  using: "composite"
  steps:
    - name: Set Build Matrix
      id: set-matrix
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const targetsPath = path.join(process.env.GITHUB_WORKSPACE, 'ci', 'MACHINES.json');
          let targets;
          try {
            if (!fs.existsSync(targetsPath)) {
              core.setFailed(`MACHINES.json not found at ${targetsPath}`);
              return;
            }
            targets = JSON.parse(fs.readFileSync(targetsPath, 'utf-8'));
          } catch (err) {
            core.setFailed(`Failed to load or parse MACHINES.json: ${err.message}`);
            return;
          }
          // Build matrix: machine, firmware
          const build_matrix = Object.values(targets).map(({ machine, firmware }) => ({ machine, firmware }));
          core.setOutput('build_matrix', JSON.stringify(build_matrix));
          console.log("Build Matrix:", build_matrix);

          // Full matrix: machine, firmware, lavaname
          const full_matrix = Object.values(targets).map(({ machine, firmware, lavaname }) => ({ machine, firmware, lavaname }));
          core.setOutput('full_matrix', JSON.stringify(full_matrix));
          console.log("Full Matrix:", full_matrix);

          // Bootbins: target, buildid, firmwareid
          const bootbins = Object.values(targets).map(({ target, buildid, firmwareid }) => ({ target, buildid, firmwareid }));
          core.setOutput('bootbins', JSON.stringify(bootbins));
          console.log("Boot Bins:", bootbins);

    - name: Set Ubuntu Config Matrix
      id: ubuntu-matrix
      if: ${{ github.workflow == 'pre_merge_ubuntu' }}
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const ubuntuConfigPath = path.join(process.env.GITHUB_WORKSPACE, 'ci', 'UBUNTU_CONFIG.json');
          let ubuntuConfig;
          try {
            if (!fs.existsSync(ubuntuConfigPath)) {
              core.setFailed(`UBUNTU_CONFIG.json not found at ${ubuntuConfigPath}`);
              return;
            }
            ubuntuConfig = JSON.parse(fs.readFileSync(ubuntuConfigPath, 'utf-8'));
          } catch (err) {
            core.setFailed(`Failed to load or parse UBUNTU_CONFIG.json: ${err.message}`);
            return;
          }
          // Build matrix: os, kernel, firmware
          const ubuntu_matrix = Object.values(ubuntuConfig).map(obj => Object.fromEntries(Object.entries(obj)));
          core.setOutput('ubuntu_matrix', JSON.stringify(ubuntu_matrix));
          console.log("Ubuntu Matrix:", ubuntu_matrix); 
