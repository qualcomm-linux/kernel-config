name: Sync workspace

inputs:
  base_branch:
    description: Base branch
    required: true
    default: qcom-next-staging
  pr_number:
    description: PR number
    required: false
  GH_TOKEN:
    description: Access Token
    required: true

outputs:
  workspace_path:
    description: Sync workspace path
    value: ${{ steps.set-workspace.outputs.workspace }}

runs:
  using: "composite"
  steps:
    - name: Clean workspace
      shell: bash
      run: |
        echo "Cleaning up workspace..."
        rm -rf ${{ github.workspace }}/*
        echo "Workspace cleaned successfully!"

    - name: Checkout PR branch
      if: inputs.base_branch == 'qcom-next-staging'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: qualcomm-linux/kernel

    - name: Configure git
      shell: bash
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"

    - name: Sync with latest changes
      if: inputs.base_branch == 'qcom-next-staging'
      shell: bash
      run: |
        set -e
        echo "Syncing with latest changes..."
        git fetch origin ${{ inputs.base_branch }}
        git merge --no-ff origin/${{ inputs.base_branch }}

    - name: Clone repositories
      if: inputs.base_branch != 'qcom-next-staging'
      shell: bash
      run: |
        git clone https://github.com/qualcomm-linux/kernel.git
        git clone https://github.com/qualcomm-linux/automerge.git

    - name: Scan PR Description
      if: inputs.base_branch != 'qcom-next-staging'
      shell: bash
      run: |
        curl -L \
        -H "Authorization: Bearer ${{ inputs.GH_TOKEN }}" \
        -H "Accept: application/vnd.github+json" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        "https://api.github.com/repos/qualcomm-linux/kernel-topics/pulls/${{ inputs.pr_number }}" | \
        jq --raw-output .body > pr-desc
        cat pr-desc

    - name: Retrieve Dependent PRs
      if: inputs.base_branch != 'qcom-next-staging'
      shell: bash
      run: |
        set +o pipefail
        cat pr-desc | \
        grep --perl-regexp '^Depends-on:( #\d+,)*( #\d+)$' | \
        cut -d ':' -f2 | \
        tr ',' '\n' | \
        sed 's/^ *//' | \
        sed 's/#//' > pr-deps
        cat pr-deps

    - name: Validate Dependent PRs
      if: inputs.base_branch != 'qcom-next-staging'
      env:
        GH_TOKEN: ${{ inputs.GH_TOKEN }}
      shell: bash
      run: |
        touch topic-branches
        touch invalid-prs
        base_pr=${{ inputs.pr_number }}
        while read -r dep_pr; do
          resp=$(curl -s -H "Authorization: Bearer $GH_TOKEN" "https://api.github.com/repos/qualcomm-linux/kernel-topics/pulls/$dep_pr")
          if echo "$resp" | jq -e ".merged_at != null" > /dev/null; then
            base_ref=$(echo "$resp" | jq -r .base.ref)
            echo "$dep_pr,$base_ref" >> topic-branches
          else
            echo "#$dep_pr" >> invalid-prs
          fi
        done < pr-deps

        if [ -s "invalid-prs" ]; then
            msg="CI build failed due to invalid or unmerged dependent PRs: $(paste -sd ' ' < invalid-prs)"
            json=$(jq -n --arg body "$msg" '{body: $body}')
            curl -s -H "Authorization: Bearer $GH_TOKEN" \
            https://api.github.com/repos/qualcomm-linux/kernel-topics/issues/"$base_pr"/comments \
            -d "$json"
            exit 1
        fi
        cat topic-branches

    - name: Create merge configuration
      if: inputs.base_branch != 'qcom-next-staging'
      shell: bash
      run: |
        TOPIC_BRANCH=${{ inputs.base_branch }}
        echo "baseline https://github.com/qualcomm-linux/kernel.git qcom-next" > merge.conf
        while IFS=',' read -r pr_number topic_branch; do
          echo "$topic_branch https://github.com/qualcomm-linux/kernel-topics.git $topic_branch" >> merge.conf
        done < topic-branches
        echo "topic https://github.com/qualcomm-linux/kernel-topics.git $TOPIC_BRANCH" >> merge.conf
        echo "File 'merge.conf' created successfully."
        cat merge.conf

    - name: Run auto merge
      id: automerge
      if: inputs.base_branch != 'qcom-next-staging'
      shell: bash
      run: |
        cd kernel
        ../automerge/ci-merge -f ../merge.conf -t head -n

    - name: Fetch PR
      if: inputs.base_branch != 'qcom-next-staging'
      shell: bash
      run: |
        cd kernel
        git fetch https://github.com/qualcomm-linux/kernel-topics.git pull/${{inputs.pr_number}}/head:pr-${{inputs.pr_number}}
        git merge pr-${{inputs.pr_number}} --no-commit
        git commit -m "Merged PR ${{inputs.pr_number}}"

    - name: Fetch PR
      if: inputs.base_branch == 'qcom-next-staging'
      shell: bash
      run: |
        git checkout ${{ inputs.base_branch }}
        git fetch https://github.com/qualcomm-linux/kernel.git pull/${{inputs.pr_number}}/head:pr-${{inputs.pr_number}}
        git merge pr-${{ inputs.pr_number }} --no-commit || echo "Merge already applied or fast-forwarded"
        if ! git diff --cached --quiet; then
          git commit -m "Merged PR #${{ inputs.pr_number }}"
        else
          echo "Nothing to commit. PR may already be merged or fast-forwarded."
        fi

    - name: Set workspace path
      id: set-workspace
      shell: bash
      run: |
        if [[ "${{ inputs.base_branch }}" == "qcom-next-staging" ]]; then
          echo "workspace=${{ github.workspace }}" >> "$GITHUB_OUTPUT"
        else
          echo "workspace=${{ github.workspace }}/kernel" >> "$GITHUB_OUTPUT"
        fi

